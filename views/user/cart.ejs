
<%- include("../../views/partial/user/header") %>

<style>
  .cart-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    justify-content: center;
  }

  .cart-card {
    background-color: #fff;
    border-radius: 12px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.07);
    width: 100%;
    max-width: 400px;
    overflow: hidden;
    display: flex;
    flex-direction: row;
    gap: 15px;
    padding: 15px;
    align-items: flex-start;
  }

  .cart-image-btn {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
  }

  .cart-card img {
    width: 120px;
    height: auto;
    border-radius: 8px;
    cursor: pointer;
    transition: transform 0.2s;
  }

  .cart-card img:hover {
    transform: scale(1.03);
  }

  .btn-group-inline {
    display: flex;
    gap: 8px;
    justify-content: center;
    flex-wrap: wrap;
  }

  .btn-group-inline form {
    margin: 0;
  }

  .cart-info {
    flex: 1;
  }

  .cart-info h3 {
    margin: 0;
    font-size: 18px;
    color: #333;
  }

  .cart-info p {
    margin: 5px 0;
    font-size: 14px;
    color: #555;
  }

  .qty-control {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-top: 10px;
}

.qty-control input[type="number"] {
  width: 60px;
  text-align: center;
  padding: 6px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 5px;
  appearance: textfield;
}

.qty-control input::-webkit-outer-spin-button,
.qty-control input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.qty-btn {
  background-color: #f0f0f0;
  border: none;
  padding: 6px 12px;
  font-size: 18px;
  cursor: pointer;
  border-radius: 5px;
  transition: background-color 0.2s;
}

.qty-btn:hover {
  background-color: #e0e0e0;
}

  .cart-total-wrapper {
    display: flex;
    justify-content: flex-end;
    margin-top: 30px;
  }

  .cart-total {
    background-color: #f9f9f9;
    padding: 20px 30px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    max-width: 300px;
    text-align: right;
  }

  .cart-total h4 {
    margin-bottom: 15px;
    font-size: 20px;
    color: #333;
  }

  .cart-total .btn {
    width: 100%;
    padding: 10px 0;
    font-weight: 600;
    font-size: 16px;
  }

  @media screen and (max-width: 768px) {
    .cart-card {
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .cart-card img {
      width: 100%;
      max-width: 250px;
    }

    .cart-info {
      width: 100%;
    }

    .cart-total-wrapper {
      justify-content: center;
    }

    .cart-total {
      width: 100%;
      max-width: 100%;
      text-align: center;
    }

    .cart-total .btn {
      width: auto;
    }

    .btn-group-inline {
      justify-content: center;
    }
  }
</style>
<main class="main">
  <section class="cart-section">
    <div class="container">
      <h2 class="mb-5 text-center fw-bold">ðŸ›’ Your Shopping Cart</h2>
      <% let hasInsufficientStock = false; %>
      <% if (cartItems.length === 0) { %>
        <p>Your cart is empty.</p>
        <a href="/shop" class="btn btn-primary mt-3">Continue Shopping</a>
      <% } else { %>
        <div class="cart-grid">
          <% cartItems.forEach(item => { %>
            <% 
              // Safety checks for all properties
              const productId = item.productId && item.productId._id ? item.productId._id : '#';
              const productName = item.productId && item.productId.productName ? item.productId.productName : 'Product';
              const brand = item.productId && item.productId.brand ? item.productId.brand : 'Unknown';
              
              // Handle both possible price field names
              const price = item.productId && 
                (item.productId.salesPrice !== undefined ? item.productId.salesPrice : 
                (item.productId.salePrice !== undefined ? item.productId.salePrice : 0));
                
              // Handle both possible image field names and array vs single string
              let productImage = 'default-product.jpg';
              if (item.productId) {
                if (item.productId.productImages && item.productId.productImages.length) {
                  productImage = item.productId.productImages[0];
                } else if (item.productId.productImage && Array.isArray(item.productId.productImage) && item.productId.productImage.length) {
                  productImage = item.productId.productImage[0];
                } else if (item.productId.productImage && typeof item.productId.productImage === 'string') {
                  productImage = item.productId.productImage;
                }
              }
              
              // Handle both possible quantity/stock field names
              const stock = item.productId && 
                (item.productId.stock !== undefined ? item.productId.stock : 
                (item.productId.quantity !== undefined ? item.productId.quantity : 0));
              
              // Check if current quantity exceeds available stock
              if (stock < item.quantity) { 
                hasInsufficientStock = true; 
              }
            %>
            <div class="cart-card">
              <div class="cart-image-btn">
                <a href="/productDetails?id=<%= productId %>">
                  <img src="/uploads/re-image/<%= item.productId.productImage[0] %>" alt="<%= productName %>" 
                       onerror="this.onerror=null; this.src='/images/default-product.jpg';">
                </a>
                <div class="btn-group-inline">
                  <form action="/remove-from-cart/<%= item._id %>" method="POST" class="remove-cart-form" data-item-id="<%= item._id %>">
                    <button type="submit" class="btn btn-outline-danger btn-sm">Remove</button>
                  </form>
                  <a href="/order?id=<%= productId %>" class="btn btn-outline-success btn-sm">Buy Now</a>
                </div>
              </div>

              <div class="cart-info">
                <h3><%= productName %></h3>
                <p><strong>Brand:</strong> <%= brand %></p>
                <p><strong>Price:</strong> â‚¹<%= price %></p>
                <p><strong>Quantity:</strong> <%= item.quantity %></p>
                <p><strong>Total:</strong> â‚¹<%= item.totalPrice %></p>
                <p><strong>Availability:</strong> <%= stock %> items in stock</p>

                <div class="qty-control" data-item-id="<%= item._id %>" data-stock="<%= stock %>">
                  <button class="qty-btn minus" id="minus-<%= item._id %>" onclick="changeQty('<%= item._id %>', -1)">âˆ’</button>
                  <input
                    type="number"
                    id="qty-<%= item._id %>"
                    value="<%= item.quantity %>"
                    min="1"
                    max="<%= stock %>"
                    onchange="submitQty('<%= item._id %>')"
                  />
                  <button class="qty-btn plus" id="plus-<%= item._id %>" onclick="changeQty('<%= item._id %>', 1)">+</button>
                </div>
                <div id="error-msg-<%= item._id %>" class="error-msg" style="color: red;"></div>
                <% if (stock < item.quantity) { %>
                  <div class="error-msg" style="color: red;">Insufficient stock available for the selected quantity. Please reduce the quantity to proceed with your order.</div>
                <% } %>
              </div>
            </div>
          <% }) %>
        </div>

        <div class="cart-total-wrapper">
          <div class="cart-total">
            <% if(hasInsufficientStock) { %>
              <h4>Total: â‚¹<%= total %></h4>
              <div class="error-msg" style="color: red;">Quantity exceeds stock for one or more items.</div>
            <% } else { %>
              <h4>Total: â‚¹<%= total %></h4>
              <a href="/orderOfCart" class="btn btn-success mt-3">Proceed to Checkout</a>
            <% } %>
          </div>
        </div>
      <% } %>
    </div>
  </section>
</main>

<script>
  function changeQty(id, delta) {
  const input = document.getElementById('qty-' + id);
  const control = document.querySelector(`.qty-control[data-item-id="${id}"]`);
  const plusBtn = document.getElementById('plus-' + id);
  const minusBtn = document.getElementById('minus-' + id);
  const errorMsg = document.getElementById('error-msg-' + id);
  const stock = parseInt(control.dataset.stock);

  let qty = parseInt(input.value) || 1;
  qty += delta;

  let message = '';
  if (qty < 1) {
    qty = 1;
  }
  if (qty > stock) {
    qty = stock;
    message = `Only ${stock} in stock.`;
  }
  if (qty > 10) {
    qty = 10;
    message = `Maximum allowed quantity is 10.`;
  }

  input.value = qty;
  errorMsg.innerText = message;
  errorMsg.style.display = message ? 'block' : 'none'; 
  plusBtn.disabled = qty >= Math.min(stock, 10);
  minusBtn.disabled = qty <= 1;

  updateCartQtyAjax(id, qty);
}

  
function changeQty(id, delta) {
  const input = document.getElementById('qty-' + id);
  const control = document.querySelector(`.qty-control[data-item-id="${id}"]`);
  const plusBtn = document.getElementById('plus-' + id);
  const minusBtn = document.getElementById('minus-' + id);
  const errorMsg = document.getElementById('error-msg-' + id);
  const stock = parseInt(control.dataset.stock);

  let currentQty = parseInt(input.value) || 1;
  let newQty = currentQty + delta;
  let message = '';

  if (newQty < 1) {
    newQty = 1;
  }

  if (newQty > stock) {
    message = `Only ${stock} in stock.`;
    newQty = stock;
  }

  if (newQty > 10) {
    message = `Maximum allowed quantity is 10.`;
    newQty = 10;
  }

  input.value = newQty;
  errorMsg.innerText = message;
  errorMsg.style.display = message ? 'block' : 'none';

  plusBtn.disabled = newQty >= Math.min(stock, 10);
  minusBtn.disabled = newQty <= 1;

  updateCartQtyAjax(id, newQty);
}

  function updateCartQtyAjax(id, qty) {
    fetch(`/update-cart/${id}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ qty })
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        console.log('Quantity updated!');
        // optionally update subtotal or reload parts of the page
      } else {
        alert(data.message || 'Error updating quantity');
      }
    })
    .catch(err => {
      console.error('AJAX Error:', err);
      alert('Something went wrong');
    });
  }

  // Add this script to your cart.ejs or in a separate JS file

function changeQty(itemId, delta) {
  const qtyInput = document.getElementById(`qty-${itemId}`);
  const currentQty = parseInt(qtyInput.value, 10);
  const maxStock = parseInt(qtyInput.max, 10);
  const errorMsg = document.getElementById(`error-msg-${itemId}`);
  
  // Calculate new quantity
  let newQty = currentQty + delta;
  
  // Validate new quantity
  if (newQty < 1) {
    newQty = 1;
    errorMsg.textContent = "Minimum quantity is 1";
  } else if (newQty > maxStock) {
    newQty = maxStock;
    errorMsg.textContent = `Maximum available stock is ${maxStock}`;
  } else {
    errorMsg.textContent = "";
  }
  
  // Update the input value
  qtyInput.value = newQty;
  
  // Submit the quantity change
  submitQty(itemId);
}

function submitQty(itemId) {
  const qtyInput = document.getElementById(`qty-${itemId}`);
  const qty = parseInt(qtyInput.value, 10);
  const maxStock = parseInt(qtyInput.max, 10);
  const errorMsg = document.getElementById(`error-msg-${itemId}`);
  
  // Validate quantity
  if (qty < 1) {
    qtyInput.value = 1;
    errorMsg.textContent = "Minimum quantity is 1";
    return;
  } else if (qty > maxStock) {
    qtyInput.value = maxStock;
    errorMsg.textContent = `Maximum available stock is ${maxStock}`;
    return;
  }
  
  // Make AJAX request to update quantity
  $.ajax({
    url: '/update-cart-quantity',
    method: 'POST',
    data: {
      itemId: itemId,
      quantity: qty
    },
    success: function(response) {
      if (response.success) {
        // Refresh the page to update totals
        location.reload();
      } else {
        errorMsg.textContent = response.message || "Error updating quantity";
      }
    },
    error: function() {
      errorMsg.textContent = "Error updating quantity";
    }
  });
}

</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.querySelectorAll('.remove-cart-form').forEach(form => {
    form.addEventListener('submit', async function (e) {
      e.preventDefault();
      const itemId = this.dataset.itemId;

      const confirmed = await Swal.fire({
        title: 'Are you sure?',
        text: "Do you want to remove this item from the cart?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, remove it!'
      });

      if (confirmed.isConfirmed) {
        try {
          const response = await fetch(`/remove-from-cart/${itemId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });

          const result = await response.json();

          if (result.success) {
            Swal.fire({
              title: 'Removed!',
              text: 'Item has been removed from your cart.',
              icon: 'success',
              timer: 1500,
              showConfirmButton: false
            }).then(() => {
              // Optionally reload the page or remove the element
              location.reload(); // or you could use: form.closest('.cart-card').remove();
            });
          } else {
            Swal.fire('Oops!', result.message || 'Failed to remove item.', 'error');
          }
        } catch (error) {
          Swal.fire('Error!', 'Something went wrong while removing the item.', 'error');
        }
      }
    });
  });
</script>



